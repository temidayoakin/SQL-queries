/* PROBLEM STATEMENT
Danny wants to use the data to answer a few simple questions about his customers, especially about their visiting patterns,
how much money theyâ€™ve spent and also which menu items are their favourite.

Having this deeper connection with his customers will help him deliver a better and more personalised experience for his loyal customers.
He plans on using these insights to help him decide whether he should expand the existing customer loyalty program - additionally he needs help to generate some basic datasets so his team can easily inspect the data without needing to use SQL.
*/


CREATE SCHEMA dannys_diner;
SET search_path = dannys_diner;

CREATE TABLE sales (
  "customer_id" VARCHAR(1),
  "order_date" DATE,
  "product_id" INTEGER
);

INSERT INTO sales
  ("customer_id", "order_date", "product_id")
VALUES
  ('A', '2021-01-01', '1'),
  ('A', '2021-01-01', '2'),
  ('A', '2021-01-07', '2'),
  ('A', '2021-01-10', '3'),
  ('A', '2021-01-11', '3'),
  ('A', '2021-01-11', '3'),
  ('B', '2021-01-01', '2'),
  ('B', '2021-01-02', '2'),
  ('B', '2021-01-04', '1'),
  ('B', '2021-01-11', '1'),
  ('B', '2021-01-16', '3'),
  ('B', '2021-02-01', '3'),
  ('C', '2021-01-01', '3'),
  ('C', '2021-01-01', '3'),
  ('C', '2021-01-07', '3');
 

CREATE TABLE menu (
  "product_id" INTEGER,
  "product_name" VARCHAR(5),
  "price" INTEGER
);

INSERT INTO menu
  ("product_id", "product_name", "price")
VALUES
  ('1', 'sushi', '10'),
  ('2', 'curry', '15'),
  ('3', 'ramen', '12');
  

CREATE TABLE members (
  "customer_id" VARCHAR(1),
  "join_date" DATE
);

INSERT INTO members
  ("customer_id", "join_date")
VALUES
  ('A', '2021-01-07'),
  ('B', '2021-01-09');
  
  
  /* --------------------
   Case Study Questions
   --------------------*/

-- 1. What is the total amount each customer spent at the restaurant?
SELECT s.customer_id, sum(m.price) as total_amount
FROM dannys_diner.sales s
JOIN dannys_diner.menu m
ON s.product_id = m.product_id
GROUP BY 1
ORDER BY 2 DESC;

-- 2. How many days has each customer visited the restaurant?
SELECT customer_id, Count(order_date) as num_days
FROM dannys_diner.sales
GROUP BY 1
ORDER BY 1;

-- 3. What was the first item from the menu purchased by each customer?
SELECT s.customer_id, min(s.order_date), m.product_name
FROM dannys_diner.sales s
JOIN dannys_diner.menu m
ON s.product_id = m.product_id
WHERE s.order_date = (SELECT min(order_date) FROM dannys_diner.sales)
GROUP BY 1,3
ORDER BY 1;

-- 4. What is the most purchased item on the menu and how many times was it purchased by all customers?
SELECT m.product_name, count(s.order_date) AS num_of_times
FROM dannys_diner.sales s
JOIN dannys_diner.menu m
ON s.product_id = m.product_id
GROUP BY 1
ORDER BY 2 desc limit 1;

-- 5. Which item was the most popular for each customer?
SELECT s.customer_id, m.product_name, count(m.product_name) AS num_of_times
FROM dannys_diner.sales s
JOIN dannys_diner.menu m
ON s.product_id = m.product_id
GROUP BY 1,2
ORDER BY 3 desc;

-- 6. Which item was purchased first by the customer after they became a member?
SELECT t.customer_id, v.product_name, t.order_date
FROM (SELECT s.customer_id, MIN(s.order_date) AS order_date 
      FROM dannys_diner.sales s
      JOIN dannys_diner.members a ON s.customer_id = a.customer_id
      WHERE s.order_date > a.join_date
      GROUP BY 1) t
JOIN dannys_diner.sales u ON t.customer_id = u.customer_id AND t.order_date = u.order_date
JOIN dannys_diner.menu v ON u.product_id = v.product_id;

-- 7. Which item was purchased just before the customer became a member?
SELECT t.customer_id, v.product_name, t.order_date
FROM (SELECT s.customer_id, MAX(s.order_date) AS order_date
      FROM dannys_diner.sales s
      JOIN dannys_diner.members a ON s.customer_id = a.customer_id
      WHERE s.order_date < a.join_date
      GROUP BY 1) t
JOIN dannys_diner.sales u ON t.customer_id = u.customer_id AND t.order_date = u.order_date
JOIN dannys_diner.menu v ON u.product_id = v.product_id;


-- 8. What is the total items and amount spent for each member before they became a member?
SELECT s.customer_id, count(m.product_name) AS total_item, sum(m.price) AS total_amount
FROM dannys_diner.sales s
JOIN dannys_diner.members a ON s.customer_id = a.customer_id
JOIN dannys_diner.menu m ON s.product_id = m.product_id
WHERE s.order_date < a.join_date
GROUP BY 1;

-- 9.  If each $1 spent equates to 10 points and sushi has a 2x points multiplier - how many points would each customer have?
SELECT DISTINCT s.customer_id, sum(
      CASE
          WHEN m.product_name = 'sushi' THEN price * 20
          ELSE price * 10
          END) OVER (PARTITION BY customer_id) AS total_points
FROM dannys_diner.sales s
JOIN dannys_diner.menu m
ON s.product_id = m.product_id
ORDER BY total_points desc;
  
